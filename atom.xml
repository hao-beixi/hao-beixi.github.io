<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>Beixi</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-27T20:54:24.855Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Beixi Hao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开花</title>
    <link href="http://example.com/2022/08/26/%E5%BC%80%E8%8A%B1/"/>
    <id>http://example.com/2022/08/26/%E5%BC%80%E8%8A%B1/</id>
    <published>2022-08-27T00:02:45.000Z</published>
    <updated>2022-08-27T20:54:24.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1396-Design-Underground-System"><a href="#1396-Design-Underground-System" class="headerlink" title="1396 Design Underground System"></a>1396 Design Underground System</h1><ul><li>won’t be realistic to store the data in volatile computer memory</li><li>store the data in permanent medium (database)</li><li>scalability 7M/day = thousands of check-ins and check-outs</li><li>using more than 1 computer - concurrency issues</li><li><h1 id="1656-Design-an-Ordered-Stream"><a href="#1656-Design-an-Ordered-Stream" class="headerlink" title="1656 Design an Ordered Stream"></a>1656 Design an Ordered Stream</h1><h1 id="380"><a href="#380" class="headerlink" title="380"></a>380</h1>Insert Delete GetRandom O(1)    51.8%    Medium<br>394<br>Decode String    57.1%    Medium<br>1169<br>Invalid Transactions    30.3%    Medium<br>430<br>Flatten a Multilevel Doubly Linked List    59.2%    Medium<br>1209<br>Remove All Adjacent Duplicates in String II    56.0%    Medium<br>1244<br>Design A Leaderboard</li></ul><p>68.4%    Medium<br>1029<br>Two City Scheduling    64.0%    Medium<br>1472<br>Design Browser History    75.6%    Medium<br>1274<br>Number of Ships in a Rectangle<br>69.1%    Hard<br>935<br>Knight Dialer    49.7%    Medium<br>723<br>Candy Crush<br>75.8%    Medium<br>140<br>Word Break II    43.6%    Hard<br>253<br>Meeting Rooms II<br>50.2%    Medium<br>1347<br>Minimum Number of Steps to Make Two Strings Anagram    76.8%    Medium<br>200<br>Number of Islands    55.2%    Medium<br>797<br>All Paths From Source to Target    81.3%    Medium<br>56<br>Merge Intervals    45.6%    Medium<br>445<br>Add Two Numbers II    59.2%    Medium<br>146<br>LRU Cache    40.5%    Medium<br>314<br>Binary Tree Vertical Order Traversal<br>51.8%    Medium<br>428<br>Serialize and Deserialize N-ary Tree<br>65.0%    Hard<br>42<br>Trapping Rain Water    57.7%    Hard<br>79<br>Word Search    40.0%    Medium<br>1354<br>Construct Target Array With Multiple Sums    36.3%    Hard<br>1553<br>Minimum Number of Days to Eat N Oranges    33.8%    Hard<br>716<br>Max Stack<br>45.3%    Hard<br>1332<br>Remove Palindromic Subsequences    76.0%    Easy<br>1570<br>Dot Product of Two Sparse Vectors<br>90.3%    Medium<br>3<br>Longest Substring Without Repeating Characters    33.6%    Medium<br>1614<br>Maximum Nesting Depth of the Parentheses    82.6%    Easy<br>1331<br>Rank Transform of an Array    58.8%    Easy<br>2276<br>Count Integers in Intervals    32.4%    Hard<br>1583<br>Count Unhappy Friends    58.9%    Medium<br>289<br>Game of Life    66.2%    Medium<br>1229<br>Meeting Scheduler<br>55.4%    Medium<br>117<br>Populating Next Right Pointers in Each Node II    49.2%    Medium<br>1249<br>Minimum Remove to Make Valid Parentheses    65.6%    Medium<br>766<br>Toeplitz Matrix    68.1%    Easy<br>1698<br>Number of Distinct Substrings in a String<br>61.3%    Medium<br>20<br>Valid Parentheses    40.8%    Easy<br>311<br>Sparse Matrix Multiplication<br>66.8%    Medium<br>443<br>String Compression    48.2%    Medium<br>420<br>Strong Password Checker    14.2%    Hard<br>611<br>Valid Triangle Number    50.1%    Medium<br>858<br>Mirror Reflection    63.1%    Medium<br>333<br>Largest BST Subtree<br>41.9%    Medium<br>2<br>Add Two Numbers    39.4%    Medium<br>492<br>Construct the Rectangle    53.3%    Easy<br>381<br>Insert Delete GetRandom O(1) - Duplicates allowed    35.6%    Hard<br>1854<br>Maximum Population Year    59.4%    Easy<br>1049<br>Last Stone Weight II    52.0%    Medium<br>987<br>Vertical Order Traversal of a Binary Tree    42.2%    Hard<br>387<br>First Unique Character in a String    58.6%    Easy<br>242<br>Valid Anagram    62.5%    Easy<br>694<br>Number of Distinct Islands<br>60.4%    Medium<br>413<br>Arithmetic Slices    64.9%    Medium<br>13<br>Roman to Integer    58.3%    Easy<br>283<br>Move Zeroes    61.1%    Easy<br>1790<br>Check if One String Swap Can Make Strings Equal    45.5%    Easy<br>1358<br>Number of Substrings Containing All Three Characters    62.4%    Medium<br>121<br>Best Time to Buy and Sell Stock    54.4%    Easy<br>856<br>Score of Parentheses    65.2%    Medium<br>744<br>Find Smallest Letter Greater Than Target    44.6%    Easy<br>312<br>Burst Balloons    56.8%    Hard<br>39<br>Combination Sum    67.0%    Medium<br>390<br>Elimination Game    46.4%    Medium<br>133<br>Clone Graph    49.8%    Medium<br>257<br>Binary Tree Paths    60.0%    Easy<br>2248<br>Intersection of Multiple Arrays    69.8%    Easy<br>31<br>Next Permutation    36.9%    Medium<br>545<br>Boundary of Binary Tree<br>44.0%    Medium<br>4<br>Median of Two Sorted Arrays    34.8%    Hard<br>22<br>Generate Parentheses    71.3%    Medium<br>1647<br>Minimum Deletions to Make Character Frequencies Unique    59.3%    Medium<br>1192<br>Critical Connections in a Network    54.5%    Hard<br>780<br>Reaching Points    32.1%    Hard<br>399<br>Evaluate Division    59.2%    Medium<br>78<br>Subsets    73.1%    Medium<br>51<br>N-Queens    62.0%    Hard<br>72<br>Edit Distance    52.1%    Hard<br>138<br>Copy List with Random Pointer    49.8%    Medium<br>665<br>Non-decreasing Array    24.0%    Medium<br>849<br>Maximize Distance to Closest Person    47.5%    Medium<br>695<br>Max Area of Island    71.5%    Medium<br>174<br>Dungeon Game    37.0%    Hard<br>697<br>Degree of an Array    55.7%    Easy<br>881<br>Boats to Save People    52.6%    Medium<br>99<br>Recover Binary Search Tree    49.8%    Medium<br>791<br>Custom Sort String    69.4%    Medium<br>1<br>Two Sum    49.0%    Easy<br>241<br>Different Ways to Add Parentheses    62.8%    Medium<br>341<br>Flatten Nested List Iterator    61.2%    Medium<br>5<br>Longest Palindromic Substring    32.3%    Medium<br>68<br>Text Justification    36.2%    Hard<br>1823<br>Find the Winner of the Circular Game    77.1%    Medium<br>33<br>Search in Rotated Sorted Array    38.4%    Medium<br>238<br>Product of Array Except Self    64.5%    Medium<br>516<br>Longest Palindromic Subsequence    60.3%    Medium<br>863<br>All Nodes Distance K in Binary Tree    61.9%    Medium<br>34<br>Find First and Last Position of Element in Sorted Array    41.3%    Medium<br>934<br>Shortest Bridge    53.6%    Medium<br>155<br>Min Stack    51.3%    Medium<br>583<br>Delete Operation for Two Strings    58.9%    Medium<br>349<br>Intersection of Two Arrays    69.9%    Easy<br>566<br>Reshape the Matrix    62.6%    Easy<br>139<br>Word Break    45.1%    Medium<br>867<br>Transpose Matrix    63.6%    Easy<br>10<br>Regular Expression Matching    28.3%    Hard<br>322<br>Coin Change    41.2%    Medium<br>692<br>Top K Frequent Words    55.0%    Medium<br>113<br>Path Sum II    55.1%    Medium<br>986<br>Interval List Intersections    71.3%    Medium<br>98<br>Validate Binary Search Tree    31.5%    Medium<br>123<br>Best Time to Buy and Sell Stock III    44.3%    Hard<br>269<br>Alien Dictionary<br>35.1%    Hard<br>659<br>Split Array into Consecutive Subsequences    50.5%    Medium<br>18<br>4Sum    36.8%    Medium<br>332<br>Reconstruct Itinerary    40.7%    Hard<br>875<br>Koko Eating Bananas    53.1%    Medium<br>126<br>Word Ladder II    27.6%    Hard<br>912<br>Sort an Array    60.9%    Medium<br>135<br>Candy    40.4%    Hard<br>441<br>Arranging Coins    45.9%    Easy<br>315<br>Count of Smaller Numbers After Self    42.9%    Hard<br>264<br>Ugly Number II    45.9%    Medium<br>128<br>Longest Consecutive Sequence    49.0%    Medium<br>698<br>Partition to K Equal Sum Subsets    41.7%    Medium<br>122<br>Best Time to Buy and Sell Stock II    62.8%    Medium<br>236<br>Lowest Common Ancestor of a Binary Tree    57.4%    Medium<br>183<br>Customers Who Never Order    66.5%    Easy<br>60<br>Permutation Sequence    43.3%    Hard<br>366<br>Find Leaves of Binary Tree<br>79.9%    Medium<br>116<br>Populating Next Right Pointers in Each Node    58.7%    Medium<br>252<br>Meeting Rooms<br>56.9%    Easy<br>1207<br>Unique Number of Occurrences    71.3%    Easy<br>73<br>Set Matrix Zeroes    49.5%    Medium<br>338<br>Counting Bits    74.9%    Easy<br>1710<br>Maximum Units on a Truck    74.2%    Easy<br>496<br>Next Greater Element I    71.0%    Easy<br>493<br>Reverse Pairs    30.7%    Hard<br>64<br>Minimum Path Sum    60.2%    Medium<br>450<br>Delete Node in a BST    49.7%    Medium<br>451<br>Sort Characters By Frequency    68.3%    Medium<br>503<br>Next Greater Element II    62.8%    Medium<br>300<br>Longest Increasing Subsequence    51.2%    Medium<br>84<br>Largest Rectangle in Histogram    41.7%    Hard<br>258<br>Add Digits    63.1%    Easy<br>404<br>Sum of Left Leaves    55.9%    Easy<br>217<br>Contains Duplicate    61.1%    Easy<br>215<br>Kth Largest Element in an Array    65.4%    Medium<br>177<br>Nth Highest Salary    36.9%    Medium<br>29<br>Divide Two Integers    17.4%    Medium<br>40<br>Combination Sum II    53.0%    Medium<br>12<br>Integer to Roman    60.2%    Medium<br>179<br>Largest Number    33.6%    Medium<br>50<br>Pow(x, n)    32.7%    Medium<br>15<br>3Sum    31.9%    Medium<br>67<br>Add Binary    51.0%    Easy<br>45<br>Jump Game II    38.2%    Medium<br>1470<br>Shuffle the Array    88.5%    Easy<br>239<br>Sliding Window Maximum    46.5%    Hard<br>198<br>House Robber    48.3%    Medium<br>374<br>Guess Number Higher or Lower    50.1%    Easy<br>437<br>Path Sum III    49.3%    Medium<br>2011<br>Final Value of Variable After Performing Operations    89.0%    Easy<br>21<br>Merge Two Sorted Lists    61.4%    Easy<br>518<br>Coin Change 2    59.2%    Medium<br>350<br>Intersection of Two Arrays II    55.4%    Easy<br>746<br>Min Cost Climbing Stairs    61.8%    Easy<br>181<br>Employees Earning More Than Their Managers    67.8%    Easy<br>44<br>Wildcard Matching    26.8%    Hard<br>134<br>Gas Station    44.8%    Medium<br>240<br>Search a 2D Matrix II    50.2%    Medium<br>733<br>Flood Fill    59.7%    Easy<br>212<br>Word Search II    37.2%    Hard<br>417<br>Pacific Atlantic Water Flow    51.4%    Medium<br>32<br>Longest Valid Parentheses    32.5%    Hard<br>47<br>Permutations II    56.3%    Medium<br>53<br>Maximum Subarray    49.9%    Medium<br>54<br>Spiral Matrix    42.9%    Medium<br>118<br>Pascal’s Triangle    68.1%    Easy<br>206<br>Reverse Linked List    71.8%    Easy<br>17<br>Letter Combinations of a Phone Number    55.1%    Medium<br>543<br>Diameter of Binary Tree    55.5%    Easy<br>127<br>Word Ladder    36.3%    Hard<br>844<br>Backspace String Compare    48.0%    Easy<br>46<br>Permutations    74.0%    Medium<br>209<br>Minimum Size Subarray Sum    44.2%    Medium<br>542<br>01 Matrix    44.0%    Medium<br>295<br>Find Median from Data Stream    50.9%    Hard<br>43<br>Multiply Strings    38.4%    Medium<br>347<br>Top K Frequent Elements    64.9%    Medium<br>90<br>Subsets II    54.7%    Medium<br>9<br>Palindrome Number    52.7%    Easy<br>162<br>Find Peak Element    46.1%    Medium<br>49<br>Group Anagrams    65.4%    Medium<br>237<br>Delete Node in a Linked List    73.4%    Easy<br>145<br>Binary Tree Postorder Traversal    65.8%    Easy<br>1143<br>Longest Common Subsequence    58.9%    Medium<br>560<br>Subarray Sum Equals K    44.2%    Medium<br>160<br>Intersection of Two Linked Lists    52.5%    Easy<br>125<br>Valid Palindrome    43.0%    Easy<br>35<br>Search Insert Position    42.1%    Easy<br>7<br>Reverse Integer    27.0%    Medium<br>14<br>Longest Common Prefix    40.4%    Easy<br>234<br>Palindrome Linked List    48.9%    Easy<br>48<br>Rotate Image    68.4%    Medium<br>202<br>Happy Number    54.0%    Easy<br>207<br>Course Schedule    45.2%    Medium<br>268<br>Missing Number    61.1%    Easy<br>62<br>Unique Paths    61.8%    Medium<br>392<br>Is Subsequence    50.0%    Easy<br>74<br>Search a 2D Matrix    46.2%    Medium<br>167<br>Two Sum II - Input Array Is Sorted    59.9%    Medium<br>509<br>Fibonacci Number    69.1%    Easy<br>169<br>Majority Element    63.6%    Easy<br>226<br>Invert Binary Tree    72.7%    Easy<br>231<br>Power of Two    45.4%    Easy<br>102<br>Binary Tree Level Order Traversal    62.7%    Medium<br>88<br>Merge Sorted Array    45.4%    Easy<br>19<br>Remove Nth Node From End of List    39.1%    Medium<br>11<br>Container With Most Water    54.1%    Medium<br>26<br>Remove Duplicates from Sorted Array    49.9%    Easy<br>704<br>Binary Search</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1396-Design-Underground-System&quot;&gt;&lt;a href=&quot;#1396-Design-Underground-System&quot; class=&quot;headerlink&quot; title=&quot;1396 Design Underground System&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LC1396 Design Underground System</title>
    <link href="http://example.com/2022/08/26/LC1396-Design-Underground-System/"/>
    <id>http://example.com/2022/08/26/LC1396-Design-Underground-System/</id>
    <published>2022-08-26T21:50:38.000Z</published>
    <updated>2022-08-27T20:54:27.910Z</updated>
    
    <content type="html"><![CDATA[<p>An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.</p><p>Implement the UndergroundSystem class:</p><p>void checkIn(int id, string stationName, int t)<br>A customer with a card ID equal to id, checks in at the station stationName at time t.<br>A customer can only be checked into one place at a time.<br>void checkOut(int id, string stationName, int t)<br>A customer with a card ID equal to id, checks out from the station stationName at time t.<br>double getAverageTime(string startStation, string endStation)<br>Returns the average time it takes to travel from startStation to endStation.<br>The average time is computed from all the previous traveling times from startStation to endStation that happened directly, meaning a check in at startStation followed by a check out from endStation.<br>The time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation.<br>There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called.<br>You may assume all calls to the checkIn and checkOut methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 &lt; t2. All events happen in chronological order.</p><p>Example 1:</p><p>Input<br>[“UndergroundSystem”,”checkIn”,”checkIn”,”checkIn”,”checkOut”,”checkOut”,”checkOut”,”getAverageTime”,”getAverageTime”,”checkIn”,”getAverageTime”,”checkOut”,”getAverageTime”]<br>[[],[45,”Leyton”,3],[32,”Paradise”,8],[27,”Leyton”,10],[45,”Waterloo”,15],[27,”Waterloo”,20],[32,”Cambridge”,22],[“Paradise”,”Cambridge”],[“Leyton”,”Waterloo”],[10,”Leyton”,24],[“Leyton”,”Waterloo”],[10,”Waterloo”,38],[“Leyton”,”Waterloo”]]</p><p>Output<br>[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]</p><p>Explanation<br>UndergroundSystem undergroundSystem = new UndergroundSystem();<br>undergroundSystem.checkIn(45, “Leyton”, 3);<br>undergroundSystem.checkIn(32, “Paradise”, 8);<br>undergroundSystem.checkIn(27, “Leyton”, 10);<br>undergroundSystem.checkOut(45, “Waterloo”, 15);  // Customer 45 “Leyton” -&gt; “Waterloo” in 15-3 = 12<br>undergroundSystem.checkOut(27, “Waterloo”, 20);  // Customer 27 “Leyton” -&gt; “Waterloo” in 20-10 = 10<br>undergroundSystem.checkOut(32, “Cambridge”, 22); // Customer 32 “Paradise” -&gt; “Cambridge” in 22-8 = 14<br>undergroundSystem.getAverageTime(“Paradise”, “Cambridge”); // return 14.00000. One trip “Paradise” -&gt; “Cambridge”, (14) / 1 = 14<br>undergroundSystem.getAverageTime(“Leyton”, “Waterloo”);    // return 11.00000. Two trips “Leyton” -&gt; “Waterloo”, (10 + 12) / 2 = 11<br>undergroundSystem.checkIn(10, “Leyton”, 24);<br>undergroundSystem.getAverageTime(“Leyton”, “Waterloo”);    // return 11.00000<br>undergroundSystem.checkOut(10, “Waterloo”, 38);  // Customer 10 “Leyton” -&gt; “Waterloo” in 38-24 = 14<br>undergroundSystem.getAverageTime(“Leyton”, “Waterloo”);    // return 12.00000. Three trips “Leyton” -&gt; “Waterloo”, (10 + 12 + 14) / 3 = 12<br>Example 2:</p><p>Input<br>[“UndergroundSystem”,”checkIn”,”checkOut”,”getAverageTime”,”checkIn”,”checkOut”,”getAverageTime”,”checkIn”,”checkOut”,”getAverageTime”]<br>[[],[10,”Leyton”,3],[10,”Paradise”,8],[“Leyton”,”Paradise”],[5,”Leyton”,10],[5,”Paradise”,16],[“Leyton”,”Paradise”],[2,”Leyton”,21],[2,”Paradise”,30],[“Leyton”,”Paradise”]]</p><p>Output<br>[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]</p><p>Explanation<br>UndergroundSystem undergroundSystem = new UndergroundSystem();<br>undergroundSystem.checkIn(10, “Leyton”, 3);<br>undergroundSystem.checkOut(10, “Paradise”, 8); // Customer 10 “Leyton” -&gt; “Paradise” in 8-3 = 5<br>undergroundSystem.getAverageTime(“Leyton”, “Paradise”); // return 5.00000, (5) / 1 = 5<br>undergroundSystem.checkIn(5, “Leyton”, 10);<br>undergroundSystem.checkOut(5, “Paradise”, 16); // Customer 5 “Leyton” -&gt; “Paradise” in 16-10 = 6<br>undergroundSystem.getAverageTime(“Leyton”, “Paradise”); // return 5.50000, (5 + 6) / 2 = 5.5<br>undergroundSystem.checkIn(2, “Leyton”, 21);<br>undergroundSystem.checkOut(2, “Paradise”, 30); // Customer 2 “Leyton” -&gt; “Paradise” in 30-21 = 9<br>undergroundSystem.getAverageTime(“Leyton”, “Paradise”); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667</p><p>Constraints:</p><p>1 &lt;= id, t &lt;= 106<br>1 &lt;= stationName.length, startStation.length, endStation.length &lt;= 10<br>All strings consist of uppercase and lowercase English letters and digits.<br>There will be at most 2 * 104 calls in total to checkIn, checkOut, and getAverageTime.<br>Answers within 10-5 of the actual value will be accepted.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 209 Minimum Size Subarray Sum</title>
    <link href="http://example.com/2022/08/18/leetcode-209-Minimum-Size-Subarray-Sum/"/>
    <id>http://example.com/2022/08/18/leetcode-209-Minimum-Size-Subarray-Sum/</id>
    <published>2022-08-19T02:07:29.000Z</published>
    <updated>2022-08-19T19:18:34.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        result = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        subarrayLength = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            subarraySum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(nums)):</span><br><span class="line">                subarraySum += nums[j]</span><br><span class="line">                <span class="keyword">if</span> subarraySum &gt;= target:</span><br><span class="line">                    subLength = j - i + <span class="number">1</span></span><br><span class="line">                    result = result <span class="keyword">if</span> result &lt; subLength <span class="keyword">else</span> subLength</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> result != <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Brute-Force&quot;&gt;&lt;a href=&quot;#Brute-Force&quot; class=&quot;headerlink&quot; title=&quot;Brute Force&quot;&gt;&lt;/a&gt;Brute Force&lt;/h2&gt;&lt;p&gt;O(n)&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Basic Algorithm 1 - Scan line</title>
    <link href="http://example.com/2022/08/18/Basic-Algorithm-1-Scan-line/"/>
    <id>http://example.com/2022/08/18/Basic-Algorithm-1-Scan-line/</id>
    <published>2022-08-19T01:29:17.000Z</published>
    <updated>2022-08-21T15:48:14.608Z</updated>
    
    <content type="html"><![CDATA[<ul><li><ol start="391"><li>Number of Airplanes in the Sky (LintCode)</li></ol></li><li><ol start="252"><li>Meeting Rooms</li></ol></li><li><ol start="253"><li>Meeting Rooms II</li></ol></li><li><ol start="56"><li>Merge Intervals</li></ol></li><li><ol start="57"><li>Insert Interval</li></ol></li><li><ol start="1272"><li>Remove Interval</li></ol></li><li><ol start="435"><li>Non-overlapping Intervals</li></ol></li><li><ol start="1288"><li>Remove Covered Intervals</li></ol></li><li><ol start="352"><li>Data Stream as Disjoint Intervals</li></ol></li><li><ol start="1229"><li>Meeting Sheduler - return earliest common slot, have length restriction</li></ol></li><li><ol start="986"><li>Interval List Intersections - return all common slot, no length restriction</li></ol></li><li><ol start="759"><li>Employee Free Time</li></ol></li><li><ol start="218"><li>The Skyline Problem<h2 id="什么是扫描线"><a href="#什么是扫描线" class="headerlink" title="什么是扫描线"></a>什么是扫描线</h2>拿数飞机举例<br>思路一，暴力扫描<br>遍历每个时刻，检测每个时刻有多少个飞机<br>思路二，扫描线！<br>不需要检测每一时刻，只需要检测起点或者终点的位置！（交点变化的位置只有起点或者终点）</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;ol start=&quot;391&quot;&gt;
&lt;li&gt;Number of Airplanes in the Sky (LintCode)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&quot;252&quot;&gt;
&lt;li&gt;Meeting Rooms&lt;/li&gt;
&lt;/ol&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Basic Data Structure 0</title>
    <link href="http://example.com/2022/08/18/Basic-Data-Structure-0/"/>
    <id>http://example.com/2022/08/18/Basic-Data-Structure-0/</id>
    <published>2022-08-19T01:28:57.000Z</published>
    <updated>2022-08-19T21:08:14.845Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Array </li><li>String</li></ul><p><strong>- Linked List</strong><br><strong>- Tree</strong></p><ul><li>Trie</li></ul><p><strong>- Stack</strong><br><strong>- Queue</strong></p><ul><li>Deque</li></ul><p><strong>- PiorityQueue (Heap)</strong><br><strong>- Hash</strong>Map</p><ul><li>HashSet</li><li>TreeMap</li><li>TreeSet</li><li>Disjoint-Set (Union Find)</li></ul><p><strong>- Graph</strong></p><ul><li>Segment Tree (zkw Tree)</li><li>Binary Index Tree (Fenwick Tree)</li></ul><h3 id="Frequently-Tested-（70-）"><a href="#Frequently-Tested-（70-）" class="headerlink" title="Frequently Tested （70%）"></a>Frequently Tested （70%）</h3><ul><li>array</li><li>string (non-primitive data type)</li><li>linked list</li><li>tree (BT, BST)</li><li>stcak</li><li>queue</li><li>piorityqueue(heap)</li><li>hashMap</li><li>hashSet</li><li>Trie</li></ul><h3 id="Seldom-Seen-（30-）"><a href="#Seldom-Seen-（30-）" class="headerlink" title="Seldom Seen （30%）"></a>Seldom Seen （30%）</h3><ul><li>disjoint-set(union find)</li><li>deque</li><li>graph</li></ul><h3 id="Not-tested-but-used-to-fasten-solution"><a href="#Not-tested-but-used-to-fasten-solution" class="headerlink" title="Not tested, but used to fasten solution"></a>Not tested, but used to fasten solution</h3><ul><li>treemap</li><li>treeset</li><li>segment tree(zkw tree)</li><li>binary index tree (fenwick tree)</li></ul><h1 id="1-Array"><a href="#1-Array" class="headerlink" title="1 Array"></a>1 Array</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">nums[index] <span class="comment">// O(1)</span></span><br></pre></td></tr></table></figure><h1 id="2-String"><a href="#2-String" class="headerlink" title="2 String"></a>2 String</h1><p>non-primitive data type</p><h3 id="primitive-data-type"><a href="#primitive-data-type" class="headerlink" title="primitive data type"></a>primitive data type</h3><ul><li>boolean</li><li>int</li><li>char</li><li>double</li><li>long</li><li>byte</li><li>short</li><li>float</li></ul><h3 id="non-primitive-data-type"><a href="#non-primitive-data-type" class="headerlink" title="non-primitive data type"></a>non-primitive data type</h3><ul><li>string</li><li>arrays</li><li>classes</li><li>interfaces</li></ul><p>String is a sequence of characters. But in Java, a string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 String</span></span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">str = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.substring();</span><br><span class="line">str.charAt(index);</span><br><span class="line">str1.compareTo(str2);</span><br></pre></td></tr></table></figure><h1 id="3-Linked-List"><a href="#3-Linked-List" class="headerlink" title="3 Linked List"></a>3 Linked List</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">hea.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">head.val</span><br></pre></td></tr></table></figure><h1 id="4-Tree"><a href="#4-Tree" class="headerlink" title="4 Tree"></a>4 Tree</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">root.left = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">root.right = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h1 id="5-Trie-try-Prefix-Tree"><a href="#5-Trie-try-Prefix-Tree" class="headerlink" title="5 Trie(try) / Prefix Tree"></a>5 Trie(try) / Prefix Tree</h1><p>Trie is a N-array Tree</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    TrieNode[] children;</span><br><span class="line">    <span class="keyword">boolean</span> isWord;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addWord()</span><br><span class="line">searchWord()</span><br><span class="line">searchPrefix()</span><br></pre></td></tr></table></figure><p>O(word.length)</p><h1 id="6-Stack"><a href="#6-Stack" class="headerlink" title="6 Stack"></a>6 Stack</h1><p>LIFO - Last in first out<br>FILO - first in last out</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(num)</span><br><span class="line">stack.peek() <span class="comment">// will not remove</span></span><br><span class="line">stack.pop()</span><br><span class="line">stack.isEmpty()</span><br></pre></td></tr></table></figure><h1 id="7-Quene"><a href="#7-Quene" class="headerlink" title="7 Quene"></a>7 Quene</h1><p>FIFO - First In First Out</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.offer(<span class="number">1</span>); <span class="comment">// recommend</span></span><br><span class="line">queue.offer(<span class="number">2</span>);</span><br><span class="line">queue.poll(); <span class="comment">// return 1</span></span><br><span class="line">queue.poll(); <span class="comment">// return 2</span></span><br></pre></td></tr></table></figure><p>O(1)</p><table><thead><tr><th></th><th>Throw Exception</th><th>Returns special value</th></tr></thead><tbody><tr><td>insert</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>remove</td><td>remove()</td><td>poll()</td></tr><tr><td>examine</td><td>element()</td><td>peek()</td></tr></tbody></table><p>Often used in BFS</p><h1 id="8-Deque-Double-ended-queue"><a href="#8-Deque-Double-ended-queue" class="headerlink" title="8 Deque (Double-ended queue)"></a>8 Deque (Double-ended queue)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; deque = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">deque.offerLast(<span class="number">1</span>);  <span class="comment">// 1</span></span><br><span class="line">deque.addLast(<span class="number">2</span>);    <span class="comment">// 1-&gt;2</span></span><br><span class="line">deque.offerFirst(<span class="number">0</span>); <span class="comment">// 0-&gt;1-&gt;2</span></span><br><span class="line">deque.peekFirst();   <span class="comment">// return 0</span></span><br><span class="line">deque.pollFirst();   <span class="comment">// return 0</span></span><br><span class="line">deque.pollLast();    <span class="comment">// return 2</span></span><br></pre></td></tr></table></figure><p>O(1)</p><h1 id="9-PiorityQueue-Heap"><a href="#9-PiorityQueue-Heap" class="headerlink" title="9 PiorityQueue(Heap)"></a>9 PiorityQueue(Heap)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PiorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PiorityQueue&lt;&gt;();</span><br><span class="line">pq.offer(<span class="number">2</span>); <span class="comment">//O(logn)</span></span><br><span class="line">pq.add(<span class="number">0</span>);   <span class="comment">//O(logn)</span></span><br><span class="line">pq.add(<span class="number">1</span>);</span><br><span class="line">pq.peek();  <span class="comment">// return 0 O(1)</span></span><br><span class="line">pq.poll();  <span class="comment">// return 0 O(logn)</span></span><br><span class="line">pq.poll();  <span class="comment">// return 1 O(logn)</span></span><br></pre></td></tr></table></figure><p>Initialization<br>O(nlogn) 1 number at a time<br>O(n) a lot numbers at once</p><h1 id="10-Java-HashMap"><a href="#10-Java-HashMap" class="headerlink" title="10 Java HashMap"></a>10 Java HashMap</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt;map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;A&quot;</span>, <span class="number">0</span>);</span><br><span class="line">map.put(<span class="string">&quot;B&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">&quot;C&quot;</span>, <span class="number">2</span>);</span><br><span class="line">map.get(<span class="string">&quot;A&quot;</span>); <span class="comment">// return 0</span></span><br><span class="line">map.get(<span class="string">&quot;C&quot;</span>); <span class="comment">// return 2</span></span><br><span class="line">map.containsKey(<span class="string">&quot;B&quot;</span>); <span class="comment">// return true</span></span><br><span class="line">map.toString(); <span class="comment">// &#123;A=0, B=1, C=2&#125;</span></span><br></pre></td></tr></table></figure><p>O(1)<br>2 step input as key in hashmap index</p><ol><li>separate chaining</li><li>open addressing</li></ol><h1 id="11-Set"><a href="#11-Set" class="headerlink" title="11 Set"></a>11 Set</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line">set.contains(<span class="number">1</span>); <span class="comment">// return true</span></span><br><span class="line">set.contains(<span class="number">2</span>); <span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h1 id="12-TreeMap-Java-Only"><a href="#12-TreeMap-Java-Only" class="headerlink" title="12 TreeMap(Java Only)"></a>12 TreeMap(Java Only)</h1><p>TreeMap is implemented based on red-black tree structure, and it is ordered by the key.<br>O(logn)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">put(key, value)</span><br><span class="line">lowerKey() &lt;</span><br><span class="line">floorKey() &lt;=</span><br><span class="line">higherKey() &gt;</span><br><span class="line">ceilingKey() &gt;=</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Integer, Integer&gt; map2 = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">map2.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">map2.put(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">map2.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">map2.get(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;12. treeMap&quot;</span>);</span><br><span class="line">System.out.println(map2.firstKey()); <span class="comment">// return 0</span></span><br><span class="line">System.out.println(map2.floorKey(<span class="number">1</span>));<span class="comment">// return 1 &lt;= 1</span></span><br><span class="line">System.out.println(map2.lowerKey(<span class="number">1</span>));<span class="comment">// return 0 &lt; 1</span></span><br><span class="line">System.out.println(map2.lowerKey(<span class="number">0</span>));<span class="comment">// return null</span></span><br><span class="line">System.out.println(map2.ceilingKey(<span class="number">2</span>));<span class="comment">//return 3</span></span><br></pre></td></tr></table></figure><h1 id="13-TreeSet-Java-Only"><a href="#13-TreeSet-Java-Only" class="headerlink" title="13 TreeSet (Java Only)"></a>13 TreeSet (Java Only)</h1><p>TreeSet are stored in a sorted and ascending order.<br>TreeSeet does not preserve the insertion order of elements but elements are sorted by keys</p><p>for insertion order of elements, use LinkedHashSet</p><ul><li>LRU cache <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first(); <span class="comment">// return smallest element</span></span><br><span class="line">lower(num);</span><br><span class="line">floor(num);</span><br><span class="line">higher(num);</span><br><span class="line">ceiling(num);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 13. TreeSet</span></span><br><span class="line">TreeSet&lt;Integer&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">treeSet.add(<span class="number">0</span>);</span><br><span class="line">treeSet.add(<span class="number">1</span>);</span><br><span class="line">treeSet.add(<span class="number">3</span>);</span><br><span class="line">System.out.println(treeSet.lower(<span class="number">1</span>)); <span class="comment">// return 0 &lt; 1</span></span><br><span class="line">System.out.println(treeSet.floor(<span class="number">1</span>)); <span class="comment">// return 1 &lt;=&gt;</span></span><br><span class="line">System.out.println(treeSet.higher(<span class="number">1</span>)); <span class="comment">// return 3 &gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="14-Disjoint-Set-Union-Find"><a href="#14-Disjoint-Set-Union-Find" class="headerlink" title="14 Disjoint-Set (Union Find)"></a>14 Disjoint-Set (Union Find)</h1><p>Union FInd is a data structure that keeps track of elements which are split into 1 or more disjoint sets.<br>Its has 2 primary operations: find and union</p><p>union(x, y) find(x)<br>O(log) is the iterated algorithm</p><p>Optimization: path compression union by rank</p><p>Basic Implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;\</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Array &lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;- Linked List&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;- Tree&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trie&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;str</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Basic Data Structure 1 - Trie</title>
    <link href="http://example.com/2022/08/18/Basic-Data-Structure-1-Trie/"/>
    <id>http://example.com/2022/08/18/Basic-Data-Structure-1-Trie/</id>
    <published>2022-08-19T01:27:48.000Z</published>
    <updated>2022-08-20T13:21:29.494Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> addWord(String word)</span><br><span class="line"><span class="number">2.</span> search(String word)</span><br><span class="line"><span class="number">3.</span> searchPrefix(String prefix)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) node.children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            node = node.chilren[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        node.isWord = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.children[c] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            node = node.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : prefix.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            node = node.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    TrieNode[] children;</span><br><span class="line">    <span class="keyword">boolean</span> isWord;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode SpeedRun 2</title>
    <link href="http://example.com/2022/08/18/Leetcode-SpeedRun-2/"/>
    <id>http://example.com/2022/08/18/Leetcode-SpeedRun-2/</id>
    <published>2022-08-19T01:21:51.000Z</published>
    <updated>2022-08-20T01:40:34.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">procedure BFS(G, V):</span><br><span class="line">    create a queue Q</span><br><span class="line">    enqueue v onto Q</span><br><span class="line">    mark V</span><br><span class="line">    <span class="keyword">while</span> Q <span class="keyword">is</span> <span class="keyword">not</span> empty:</span><br><span class="line">        t &lt;- Q.dequeue()</span><br><span class="line">        <span class="keyword">if</span> t <span class="keyword">is</span> what we are looking <span class="keyword">for</span>:</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">all</span> edges e <span class="keyword">in</span> G.adjacentEdges(t) do</span><br><span class="line">            u &lt;- G.adjacentVertex(t, e)</span><br><span class="line">            <span class="keyword">if</span> u <span class="keyword">is</span> <span class="keyword">not</span> marked:</span><br><span class="line">                mark u</span><br><span class="line">                enqueue u onto Q</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; q; <span class="comment">// core data structure</span></span><br><span class="line">    Set&lt;Node&gt; visited; <span class="comment">// avoid going backward</span></span><br><span class="line"></span><br><span class="line">    q.offer(start); <span class="comment">// add start in the queue</span></span><br><span class="line">    visited.add(start);</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;  <span class="comment">// record the steps</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q not empty) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = q.size();</span><br><span class="line">        <span class="comment">// spread the current nodes in the queue to the surrounding</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            Node cur = q.poll();</span><br><span class="line">            <span class="comment">// here we check if we reached target or not</span></span><br><span class="line">            <span class="keyword">if</span> (cur is target)</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            <span class="comment">// add cur&#x27;s neighbors to the queue</span></span><br><span class="line">            <span class="keyword">for</span> (Node x : cur.adj())</span><br><span class="line">                <span class="keyword">if</span> (x not in visited) &#123;</span><br><span class="line">                    q.offer(x);</span><br><span class="line">                    visited.add(x);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update steps</span></span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BFS&quot;&gt;&lt;a href=&quot;#BFS&quot; class=&quot;headerlink&quot; title=&quot;BFS&quot;&gt;&lt;/a&gt;BFS&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode SpeedRun 0</title>
    <link href="http://example.com/2022/08/18/Leetcode-SpeedRun-0/"/>
    <id>http://example.com/2022/08/18/Leetcode-SpeedRun-0/</id>
    <published>2022-08-19T01:21:46.000Z</published>
    <updated>2022-08-19T22:03:43.654Z</updated>
    
    <content type="html"><![CDATA[<ol><li>One topic - one Problem</li><li>covers 80%<br>Algorithm 27Q</li><li>binary search 3Q - 1 binary, one for gussing answer, lis</li><li>pointers 2Q - 2sum, 3sum</li><li>sliding window 2Q</li><li>bfs + dfs 3 + 3 = 5Q</li><li>backtracking 2Q - subset, permutation</li><li>sort merge sort/quick sort/bucket sort 3Q</li><li>monotonic stack 2Q</li><li>monotonic queue 2Q</li><li>scan line 2Q</li><li>divide and conquer 2Q</li><li>prefix sum 1Q</li></ol><p>Data Structure 18Q</p><ol><li>Trie 2Q</li><li>Heap 2Q</li><li>Union Find 1Q</li><li>List flip+union+find+delete+structure convert 5Q</li><li>Comparator 1Q</li><li>LRU 1Q</li><li>Tree traverse+structure convert+LCA+BST+Iterator 6Q</li></ol><p>Graph 6Q </p><ul><li>bfs</li><li>dfs</li><li>topological </li><li>dijikstra</li><li>union find</li><li>mst</li></ul><p>DP 9Q </p><ul><li>1d</li><li>2d</li><li>backpack 1, 2</li><li>dfs + memo</li><li>LIS</li><li>LCS</li><li>LPS</li><li>range DP<ul><li>coordinates</li><li>backpack</li><li>internal</li><li>string</li></ul></li></ul><h1 id="1-Binary-Search"><a href="#1-Binary-Search" class="headerlink" title="1. Binary Search"></a>1. Binary Search</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0</span>;</span><br><span class="line">end = len;</span><br><span class="line"><span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">    mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &lt; target&gt;)</span><br><span class="line">        start = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        end = mid</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// start == end</span></span><br><span class="line"><span class="keyword">return</span> end</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;One topic - one Problem&lt;/li&gt;
&lt;li&gt;covers 80%&lt;br&gt;Algorithm 27Q&lt;/li&gt;
&lt;li&gt;binary search 3Q - 1 binary, one for gussing answer, lis&lt;/li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Advanced Algorithm 4 - offline</title>
    <link href="http://example.com/2022/08/18/Advanced-Algorithm-4-offline/"/>
    <id>http://example.com/2022/08/18/Advanced-Algorithm-4-offline/</id>
    <published>2022-08-19T00:44:34.000Z</published>
    <updated>2022-08-19T00:44:34.684Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Advanced Algorithm 3 - Reservoir Sampling</title>
    <link href="http://example.com/2022/08/18/Advanced-Algorithm-3-Reservoir-Sampling/"/>
    <id>http://example.com/2022/08/18/Advanced-Algorithm-3-Reservoir-Sampling/</id>
    <published>2022-08-19T00:44:28.000Z</published>
    <updated>2022-08-19T00:44:28.168Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Advanced Algorithm 2 - Bit Manipulation</title>
    <link href="http://example.com/2022/08/18/Advanced-Algorithm-2-Bit-Manipulation/"/>
    <id>http://example.com/2022/08/18/Advanced-Algorithm-2-Bit-Manipulation/</id>
    <published>2022-08-19T00:44:15.000Z</published>
    <updated>2022-08-19T00:44:15.638Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Advanced Algorithm 1 - Rolling Hash</title>
    <link href="http://example.com/2022/08/18/Advanced-Algorithm-1-Rolling-Hash/"/>
    <id>http://example.com/2022/08/18/Advanced-Algorithm-1-Rolling-Hash/</id>
    <published>2022-08-19T00:44:05.000Z</published>
    <updated>2022-08-19T00:44:05.860Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OOD 3 - Design an elevator</title>
    <link href="http://example.com/2022/08/18/OOD-3-Design-an-elevator/"/>
    <id>http://example.com/2022/08/18/OOD-3-Design-an-elevator/</id>
    <published>2022-08-19T00:43:49.000Z</published>
    <updated>2022-08-19T00:43:49.036Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OOD 2 - Design a parking lot</title>
    <link href="http://example.com/2022/08/18/OOD-2-Design-a-parking-lot/"/>
    <id>http://example.com/2022/08/18/OOD-2-Design-a-parking-lot/</id>
    <published>2022-08-19T00:43:40.000Z</published>
    <updated>2022-08-19T00:43:40.613Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OOD 1 - Basic Concept</title>
    <link href="http://example.com/2022/08/18/OOD-1-Basic-Concept/"/>
    <id>http://example.com/2022/08/18/OOD-1-Basic-Concept/</id>
    <published>2022-08-19T00:43:32.000Z</published>
    <updated>2022-08-19T00:43:32.224Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>classic problem 8 - palindrome</title>
    <link href="http://example.com/2022/08/18/classic-problem-8-palindrome/"/>
    <id>http://example.com/2022/08/18/classic-problem-8-palindrome/</id>
    <published>2022-08-19T00:43:19.000Z</published>
    <updated>2022-08-19T00:43:19.786Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>classic problem 7 - two sum</title>
    <link href="http://example.com/2022/08/18/classic-problem-7-two-sum/"/>
    <id>http://example.com/2022/08/18/classic-problem-7-two-sum/</id>
    <published>2022-08-19T00:43:00.000Z</published>
    <updated>2022-08-19T00:43:00.111Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>classic problem 6 - Parentheses</title>
    <link href="http://example.com/2022/08/18/classic-problem-6-Parentheses/"/>
    <id>http://example.com/2022/08/18/classic-problem-6-Parentheses/</id>
    <published>2022-08-19T00:42:50.000Z</published>
    <updated>2022-08-19T00:42:50.980Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>classic problem 5 - Jump Game</title>
    <link href="http://example.com/2022/08/18/classic-problem-5-Jump-Game/"/>
    <id>http://example.com/2022/08/18/classic-problem-5-Jump-Game/</id>
    <published>2022-08-19T00:42:41.000Z</published>
    <updated>2022-08-19T00:42:41.996Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>classic problem 4 - Sell Stock</title>
    <link href="http://example.com/2022/08/18/classic-problem-4-Sell-Stock/"/>
    <id>http://example.com/2022/08/18/classic-problem-4-Sell-Stock/</id>
    <published>2022-08-19T00:42:35.000Z</published>
    <updated>2022-08-19T00:42:35.454Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
